import dotenv from "dotenv";
import path from "path";

// Load environment variables from .env.local
dotenv.config({ path: path.join(process.cwd(), ".env.local") });

import { connectDB } from "../lib/mongodb";
import { seedUsers } from "./seed-users";
import { seedProperties } from "./seed-properties";
import { seedProfessionals } from "./seed-professionals";
import seedNews from "./seed-news";
import { seedInquiries } from "./seed-inquiries";
import { seedSavedSearches } from "./seed-saved-searches";
import { seedSearchAlerts } from "./seed-search-alerts";
import { seedFavorites } from "./seed-favorites";
import { seedCommissions } from "./seed-commissions";
import { seedTasks } from "./seed-tasks";
import { seedReports } from "./seed-reports";
import { seedMarketAnalysis } from "./seed-market-analysis";
import { seedPriceHistory } from "./seed-price-history";
import { seedNotifications } from "./seed-notifications";
import { seedAdvertisements } from "./seed-advertisements";

// Ordre d'ex√©cution des seeds (important pour les d√©pendances)
const seedOrder = [
  {
    name: "Users",
    fn: seedUsers,
    description: "Cr√©ation des utilisateurs de base",
  },
  {
    name: "Properties",
    fn: seedProperties,
    description: "Cr√©ation des propri√©t√©s",
  },
  {
    name: "Professionals",
    fn: seedProfessionals,
    description: "Cr√©ation des profils professionnels",
  },
  {
    name: "News",
    fn: seedNews,
    description: "Cr√©ation des articles de presse",
  },
  {
    name: "Inquiries",
    fn: seedInquiries,
    description: "Cr√©ation des demandes d'information",
  },
  {
    name: "SavedSearches",
    fn: seedSavedSearches,
    description: "Cr√©ation des recherches sauvegard√©es",
  },
  {
    name: "SearchAlerts",
    fn: seedSearchAlerts,
    description: "Cr√©ation des alertes de recherche",
  },
  { name: "Favorites", fn: seedFavorites, description: "Cr√©ation des favoris" },
  {
    name: "Commissions",
    fn: seedCommissions,
    description: "Cr√©ation des commissions",
  },
  { name: "Tasks", fn: seedTasks, description: "Cr√©ation des t√¢ches" },
  { name: "Reports", fn: seedReports, description: "Cr√©ation des rapports" },
  {
    name: "MarketAnalysis",
    fn: seedMarketAnalysis,
    description: "Cr√©ation des analyses de march√©",
  },
  {
    name: "PriceHistory",
    fn: seedPriceHistory,
    description: "Cr√©ation de l'historique des prix",
  },
  {
    name: "Notifications",
    fn: seedNotifications,
    description: "Cr√©ation des notifications",
  },
  {
    name: "Advertisements",
    fn: seedAdvertisements,
    description: "Cr√©ation des publicit√©s",
  },
];

interface SeedResult {
  name: string;
  success: boolean;
  duration: number;
  error?: string;
}

function formatDuration(ms: number): string {
  if (ms < 1000) return `${ms}ms`;
  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
  return `${(ms / 60000).toFixed(1)}min`;
}

function formatResults(results: SeedResult[]): void {
  console.log("\n" + "=".repeat(80));
  console.log("üìä R√âSUM√â DU SEEDING");
  console.log("=".repeat(80));

  const successful = results.filter((r) => r.success);
  const failed = results.filter((r) => !r.success);
  const totalDuration = results.reduce((sum, r) => sum + r.duration, 0);

  console.log(`‚úÖ R√©ussis: ${successful.length}/${results.length}`);
  console.log(`‚ùå √âchou√©s: ${failed.length}/${results.length}`);
  console.log(`‚è±Ô∏è Dur√©e totale: ${formatDuration(totalDuration)}`);

  if (successful.length > 0) {
    console.log("\nüü¢ SEEDS R√âUSSIS:");
    successful.forEach((result) => {
      console.log(
        `   ‚úì ${result.name.padEnd(20)} - ${formatDuration(result.duration)}`
      );
    });
  }

  if (failed.length > 0) {
    console.log("\nüî¥ SEEDS √âCHOU√âS:");
    failed.forEach((result) => {
      console.log(`   ‚úó ${result.name.padEnd(20)} - ${result.error}`);
    });
  }

  console.log("\n" + "=".repeat(80));
}

export async function seedAll(
  options: {
    skipExisting?: boolean;
    verbose?: boolean;
    only?: string[];
    exclude?: string[];
  } = {}
) {
  const { skipExisting = false, verbose = true, only, exclude } = options;

  try {
    console.log("üöÄ D√©marrage du seeding complet de la base de donn√©es");
    console.log("‚è∞ D√©but:", new Date().toLocaleString("fr-FR"));

    // Connexion √† la base de donn√©es
    await connectDB();
    console.log("‚úÖ Connexion √† MongoDB √©tablie");

    // Filtrer les seeds √† ex√©cuter
    let seedsToRun = seedOrder;

    if (only && only.length > 0) {
      seedsToRun = seedOrder.filter((seed) =>
        only.some((name) =>
          seed.name.toLowerCase().includes(name.toLowerCase())
        )
      );
      console.log(
        `üéØ Ex√©cution s√©lective: ${seedsToRun.map((s) => s.name).join(", ")}`
      );
    }

    if (exclude && exclude.length > 0) {
      seedsToRun = seedsToRun.filter(
        (seed) =>
          !exclude.some((name) =>
            seed.name.toLowerCase().includes(name.toLowerCase())
          )
      );
      console.log(`üö´ Exclusions: ${exclude.join(", ")}`);
    }

    console.log(`üìã ${seedsToRun.length} seeds √† ex√©cuter\n`);

    const results: SeedResult[] = [];

    // Ex√©cuter chaque seed
    for (let i = 0; i < seedsToRun.length; i++) {
      const seed = seedsToRun[i];
      const startTime = Date.now();

      try {
        console.log(
          `[${i + 1}/${seedsToRun.length}] üîÑ ${seed.name}: ${seed.description}`
        );

        if (verbose) {
          console.log(`   ‚è≥ D√©marrage...`);
        }

        await seed.fn();

        const duration = Date.now() - startTime;
        results.push({
          name: seed.name,
          success: true,
          duration,
        });

        console.log(`   ‚úÖ Termin√© en ${formatDuration(duration)}\n`);
      } catch (error) {
        const duration = Date.now() - startTime;
        const errorMessage =
          error instanceof Error ? error.message : "Erreur inconnue";

        results.push({
          name: seed.name,
          success: false,
          duration,
          error: errorMessage,
        });

        console.error(
          `   ‚ùå √âchec apr√®s ${formatDuration(duration)}: ${errorMessage}\n`
        );

        if (!skipExisting) {
          console.error("üõë Arr√™t du seeding suite √† l'erreur");
          throw error;
        }
      }
    }

    // Afficher le r√©sum√©
    formatResults(results);

    const failedCount = results.filter((r) => !r.success).length;
    if (failedCount === 0) {
      console.log("üéâ Seeding complet termin√© avec succ√®s!");
    } else {
      console.log(`‚ö†Ô∏è Seeding termin√© avec ${failedCount} erreur(s)`);
    }

    return results;
  } catch (error) {
    console.error("üí• Erreur fatale lors du seeding:", error);
    throw error;
  }
}

// Fonction pour nettoyer toutes les collections
export async function clearAllData() {
  try {
    await connectDB();

    const mongoose = require("mongoose");
    const collections = await mongoose.connection.db
      .listCollections()
      .toArray();

    console.log("üóëÔ∏è Suppression de toutes les donn√©es...");

    for (const collection of collections) {
      await mongoose.connection.db.collection(collection.name).deleteMany({});
      console.log(`   ‚úì Collection ${collection.name} vid√©e`);
    }

    console.log("‚úÖ Toutes les donn√©es ont √©t√© supprim√©es");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression des donn√©es:", error);
    throw error;
  }
}

// Fonction pour afficher les statistiques de la base
export async function showDatabaseStats() {
  try {
    await connectDB();

    const mongoose = require("mongoose");
    const collections = await mongoose.connection.db
      .listCollections()
      .toArray();

    console.log("üìä STATISTIQUES DE LA BASE DE DONN√âES");
    console.log("=".repeat(50));

    let totalDocuments = 0;

    for (const collection of collections) {
      const count = await mongoose.connection.db
        .collection(collection.name)
        .countDocuments();
      totalDocuments += count;
      console.log(
        `${collection.name.padEnd(20)}: ${count.toLocaleString(
          "fr-FR"
        )} documents`
      );
    }

    console.log("=".repeat(50));
    console.log(`Total: ${totalDocuments.toLocaleString("fr-FR")} documents`);

    // Statistiques de la base
    const stats = await mongoose.connection.db.stats();
    console.log(
      `Taille de la base: ${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`
    );
    console.log(`Index: ${(stats.indexSize / 1024 / 1024).toFixed(2)} MB`);
  } catch (error) {
    console.error("‚ùå Erreur lors de l'affichage des statistiques:", error);
    throw error;
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  const args = process.argv.slice(2);

  // Analyser les arguments
  const options = {
    skipExisting: args.includes("--skip-existing"),
    verbose: !args.includes("--quiet"),
    only: args
      .find((arg) => arg.startsWith("--only="))
      ?.split("=")[1]
      ?.split(","),
    exclude: args
      .find((arg) => arg.startsWith("--exclude="))
      ?.split("=")[1]
      ?.split(","),
  };

  if (args.includes("--clear")) {
    clearAllData()
      .then(() => {
        console.log("üéâ Suppression termin√©e");
        process.exit(0);
      })
      .catch((error) => {
        console.error("üí• Erreur fatale:", error);
        process.exit(1);
      });
  } else if (args.includes("--stats")) {
    showDatabaseStats()
      .then(() => {
        process.exit(0);
      })
      .catch((error) => {
        console.error("üí• Erreur fatale:", error);
        process.exit(1);
      });
  } else {
    seedAll(options)
      .then((results) => {
        const failedCount = results.filter((r) => !r.success).length;
        process.exit(failedCount > 0 ? 1 : 0);
      })
      .catch((error) => {
        console.error("üí• Erreur fatale:", error);
        process.exit(1);
      });
  }
}

/*
USAGE:

# Seeding complet
npm run seed:all

# Seeding avec options
npm run seed:all -- --skip-existing --quiet

# Seeding s√©lectif
npm run seed:all -- --only=users,properties

# Seeding avec exclusions
npm run seed:all -- --exclude=notifications,advertisements

# Vider la base
npm run seed:all -- --clear

# Afficher les statistiques
npm run seed:all -- --stats
*/
